(function () {
    var validate = require('validate'),
        xhn = require('xhn/old-index.js'),
        assert = require('assert'),
        metadata = xhn.metadata(),
        input = xhn.inputControl();

    assert.strictEqual(xhn.isLinkRelation('search'), true, 'Default link relations are wrong.');
    assert.strictEqual(xhn.isLinkRelation('prev'), true, 'Default link relations are wrong.');
    assert.strictEqual(xhn.isLinkRelation('test'), false, 'Default link relations are wrong.');

    xhn.setLinkRelation('test');

    assert.strictEqual(xhn.isLinkRelation('search'), true, 'Link relations are wrong.');
    assert.strictEqual(xhn.isLinkRelation('prev'), true, 'Link relations are wrong.');
    assert.strictEqual(xhn.isLinkRelation('test'), true, 'Link relations are wrong.');

    assert.strictEqual(xhn.isMethod('GET'), true, 'Default methods are wrong.');
    assert.strictEqual(xhn.isMethod('POST'), true, 'Default methods are wrong.');
    assert.strictEqual(xhn.isMethod('WRONG'), false, 'Default methods are wrong.');

    xhn.setMethod('WRONG');

    assert.strictEqual(xhn.isMethod('GET'), true, 'Methods are wrong.');
    assert.strictEqual(xhn.isMethod('POST'), true, 'Methods are wrong.');
    assert.strictEqual(xhn.isMethod('WRONG'), true, 'Methods are wrong.');

    assert.strictEqual(xhn.isHeaderField('Content-Type'), true, 'Default header fields are wrong.');
    assert.strictEqual(xhn.isHeaderField('Accept'), true, 'Default header fields are wrong.');
    assert.strictEqual(xhn.isHeaderField('test'), false, 'Default header fields are wrong.');

    metadata.addField('Content-Type', 'application/xhtml+xml')
        .addField('Accept', 'text/html')
        .addField('test', 'test')
        .addField(1, 'test2')
        .addField('test3', 1);

    assert.strictEqual(validate.isString(metadata['Content-Type']), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isString(metadata['Accept']), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isUndefined(metadata['test']), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isUndefined(metadata[1]), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isUndefined(metadata['test3']), true, 'Metadata setter did not work.');

    xhn.setHeaderField('test');

    assert.strictEqual(xhn.isHeaderField('Content-Type'), true, 'Header fields are wrong.');
    assert.strictEqual(xhn.isHeaderField('Accept'), true, 'Header fields are wrong.');
    assert.strictEqual(xhn.isHeaderField('test'), true, 'Header fields are wrong.');

    metadata.addField('Content-Type', 'application/xhtml+xml')
        .addField('Accept', 'text/html')
        .addField('test', 'test')
        .addField(1, 'test2')
        .addField('test3', 1);

    assert.strictEqual(validate.isString(metadata['Content-Type']), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isString(metadata['Accept']), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isString(metadata['test']), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isUndefined(metadata[1]), true, 'Metadata setter did not work.');
    assert.strictEqual(validate.isUndefined(metadata['test3']), true, 'Metadata setter did not work.');

    var olhc = xhn.lo(),
        elhc = xhn.le(),
        tqfhc = xhn.lt(),
        iufhc = xhn.liu(),
        idfhc = xhn.lid(),
        niufhc = xhn.ln(),
        lc = xhn.affordances(1);

    assert.strictEqual(olhc._method === 'GET', true, 'LO constructor did not work.');
    assert.strictEqual(validate.isString(olhc._id), true, 'LO constructor did not work.');
    assert.strictEqual(validate.isString(olhc._uri), true, 'LO constructor did not work.');
    assert.strictEqual(validate.isString(olhc._relation), true, 'LO constructor did not work.');
    assert.strictEqual(validate.isObject(olhc._metadata), true, 'LO constructor did not work.');
    assert.strictEqual(validate.isUndefined(olhc._controls), true, 'LO constructor did not work');

    assert.strictEqual(elhc._method === 'GET', true, 'LE constructor did not work.');
    assert.strictEqual(validate.isString(elhc._id), true, 'LE constructor did not work.');
    assert.strictEqual(validate.isString(elhc._uri), true, 'LE constructor did not work.');
    assert.strictEqual(validate.isString(elhc._relation), true, 'LE constructor did not work.');
    assert.strictEqual(validate.isObject(elhc._metadata), true, 'LE constructor did not work.');
    assert.strictEqual(validate.isUndefined(elhc._controls), true, 'LE constructor did not work');

    assert.strictEqual(tqfhc._method === 'GET', true, 'LT constructor did not work.');
    assert.strictEqual(validate.isString(tqfhc._id), true, 'LT constructor did not work.');
    assert.strictEqual(validate.isString(tqfhc._uri), true, 'LT constructor did not work.');
    assert.strictEqual(validate.isString(tqfhc._relation), true, 'LT constructor did not work.');
    assert.strictEqual(validate.isObject(tqfhc._metadata), true, 'LT constructor did not work.');
    assert.strictEqual(!validate.isUndefined(tqfhc._controls), true, 'FHC constructor did not work');

    assert.strictEqual(iufhc._method === 'PUT', true, 'LIU constructor did not work.');
    assert.strictEqual(validate.isString(iufhc._id), true, 'LIU constructor did not work.');
    assert.strictEqual(validate.isString(iufhc._uri), true, 'LIU constructor did not work.');
    assert.strictEqual(validate.isString(iufhc._relation), true, 'LIU constructor did not work.');
    assert.strictEqual(validate.isObject(iufhc._metadata), true, 'LIU constructor did not work.');
    assert.strictEqual(!validate.isUndefined(iufhc._controls), true, 'FHC constructor did not work');

    assert.strictEqual(idfhc._method === 'DELETE', true, 'LID constructor did not work.');
    assert.strictEqual(validate.isString(idfhc._id), true, 'LID constructor did not work.');
    assert.strictEqual(validate.isString(idfhc._uri), true, 'LID constructor did not work.');
    assert.strictEqual(validate.isString(idfhc._relation), true, 'LID constructor did not work.');
    assert.strictEqual(validate.isObject(idfhc._metadata), true, 'LID constructor did not work.');
    assert.strictEqual(!validate.isUndefined(idfhc._controls), true, 'FHC constructor did not work');

    assert.strictEqual(niufhc._method === 'POST', true, 'LN constructor did not work.');
    assert.strictEqual(validate.isString(niufhc._id), true, 'LN constructor did not work.');
    assert.strictEqual(validate.isString(niufhc._uri), true, 'LN constructor did not work.');
    assert.strictEqual(validate.isString(niufhc._relation), true, 'LN constructor did not work.');
    assert.strictEqual(validate.isObject(niufhc._metadata), true, 'LN constructor did not work.');
    assert.strictEqual(!validate.isUndefined(niufhc._controls), true, 'FHC constructor did not work');

    input.setLabel('website')
        .setHidden(true)
        .setReadonly(true)
        .setValueOptions(['<html><body></body></html>']);

    assert.strictEqual(validate.isString(input._id), true, 'InputControl constructor does not work.');
    assert.strictEqual(!validate.isUndefined(input._value), true, 'InputControl constructor does not work.');
    assert.strictEqual(validate.isArray(input._accept), true, 'InputControl constructor does not work.');
    assert.strictEqual(validate.isBoolean(input._required), true, 'InputControl constructor does not work.');
    input.setLabel(1);
    assert.strictEqual(validate.isString(input._label), true, 'setLabel on an InputControl does not work.');
    input.setHidden(1);
    assert.strictEqual(validate.isBoolean(input._hidden), true, 'setHidden on an InputControl does not work.');
    input.setReadonly(1);
    assert.strictEqual(validate.isBoolean(input._readonly), true, 'setReadonly on an InputControl does not work.');
    input.setValueOptions({});
    assert.strictEqual(validate.isArray(input._options), true, 'setValueOptions on an InputControl does not work.');

    assert.strictEqual(niufhc._controls.length === 0, true, 'FHC had InputControls before adding any.');
    niufhc.addInputControl(input);
    assert.strictEqual(niufhc._controls.length > 0, true, 'addInputControl did not work.');
    niufhc.addInputControl(input);
    assert.strictEqual(niufhc._controls.length === 1, true, 'addInputControl did not work. ' +
        'Duplicate InputControl instance was added.');

    assert.strictEqual(validate.isString(lc._id), true, 'The constructor did not work.');
    assert.strictEqual(validate.isArray(lc._affordances), true, 'The constructor did not work.');
    lc.addAffordance(niufhc);
    lc.addAffordance(niufhc);
    lc.addAffordance(xhn.affordances('test'));
    lc.addAffordance(1);
    lc.addAffordance({});
    lc.addAffordance([]);

    lc._affordances.forEach(function (element) {
        assert.strictEqual((element instanceof niufhc.constructor) || (element instanceof lc.constructor), true,
            'Add method did not work.');
    });

    assert.strictEqual(lc._affordances.length === 2, true,
        'addLink let duplicates or non-HC/LinkCollection types be added.');

    assert.strictEqual(xhn.NavAL_JSON instanceof xhn.define().constructor, true,
        'NavAL_JSON was not instantiated properly.');
    assert.strictEqual(xhn.NavAL_XML instanceof xhn.define().constructor, true,
        'NavAL_XML was not instantiated properly.');
    assert.strictEqual(validate.isObject(xhn.define()), true,
        'xhn.define() does not work properly.');
    assert.strictEqual(xhn.plugin() === xhn, true,
        'Returned something other than a reference to the xhn exports object.');
    assert.strictEqual(xhn.quiet() === xhn, true,
        'Returned something other than a reference to the xhn exports object.');
    assert.strictEqual(xhn.prettify() === xhn, true,
        'Returned something other than a reference to the xhn exports object.');

    try {
        for (var i = 0; i < 2; i++) {
            switch (i) {
                case 0:
                    xhn.plugin(xhn.NavAL_JSON)
                        .quiet(false)
                        .prettify('json');
                    break;
                case 1:
                    xhn.plugin(xhn.NavAL_XML)
                        .quiet(false)
                        .prettify('xml');
                    break;
                default:
                    break;
            }
            assert.strictEqual(validate.isString(xhn.stringify(null)), true, '0');
            assert.strictEqual(validate.isString(xhn.stringify(undefined)), true, '1');
            assert.strictEqual(validate.isString(xhn.stringify(true)), true, '2');
            assert.strictEqual(validate.isString(xhn.stringify(false)), true, '3');
            assert.strictEqual(validate.isString(xhn.stringify(0)), true, '4');
            assert.strictEqual(validate.isString(xhn.stringify(3.14)), true, '5');
            assert.strictEqual(validate.isString(xhn.stringify(3e100)), true, '6');
            assert.strictEqual(validate.isString(xhn.stringify('')), true, '7');
            assert.strictEqual(validate.isString(xhn.stringify('testing')), true, '8');
            assert.strictEqual(validate.isString(xhn.stringify('\\t\\t\\t\\t\\t')), true, '9');
            assert.strictEqual(validate.isString(xhn.stringify('\\testing')), true, '10');
            assert.strictEqual(validate.isString(xhn.stringify({})), true, '11');
            assert.strictEqual(validate.isString(xhn.stringify([])), true, '12');
            assert.strictEqual(validate.isString(xhn.stringify(function () {
            })), true, '13');
            assert.strictEqual(validate.isString(xhn.stringify({'key':'value'})), true, '14');
            assert.strictEqual(validate.isString(xhn.stringify({'key':null})), true, '15');
            assert.strictEqual(validate.isString(xhn.stringify({'key':undefined})), true, '16');
            assert.strictEqual(validate.isString(xhn.stringify({'key':function () {
            }})), true, '17');
            assert.strictEqual(validate.isString(xhn.stringify([1, 2, 3, function () {
            }])), true, '18');
            assert.strictEqual(validate.isString(xhn.stringify(new Date(79, 5, 24, 11, 33, 0))), true, '19');
            assert.strictEqual(validate.isString(xhn.stringify({
                'key':function () {
                },
                'href':'http://www.google.com',
                'test':{
                    'href':'http://www.testing.com'
                }
            })), true, '20');

            var collection = xhn.affordances(),
                linkO = xhn.lo(),
                linkE = xhn.le(),
                linkT = xhn.lt(),
                linkN = xhn.ln(),
                linkID = xhn.lid(),
                linkIU = xhn.liu(),
                input = xhn.inputControl(),
                meta = xhn.metadata(),
                populatedLinkO = xhn.lo('test', 'https://www.google.com', 'search', meta),
                populatedLinkN = xhn.ln('test', 'https://www.google.com', 'search', meta)
                    .addInputControl(input),
                populatedLinkT = xhn.lt('test', 'https://www.google.com', 'search', meta)
                    .addInputControl(xhn.inputControl('test', '', undefined, true))
                    .addInputControl(xhn.inputControl('test', '', undefined, true)
                    .setLabel('label')
                    .setHidden(true)
                    .setReadonly(true)
                    .setValueOptions(['option', 'option2'])
                    .setRegExp(/%k/g.toString())),
                collectionTwo = xhn.affordances();

            assert.strictEqual(validate.isString(xhn.stringify(collection)), true, '21');

            meta.addField('Accept', 'text/plain');
            meta.addField('Accept', 'text/html');
            collection.addAffordance(populatedLinkT);

            assert.strictEqual(validate.isString(xhn.stringify(collection)), true, '22');

            collection.addAffordance(collectionTwo);

            assert.strictEqual(validate.isString(xhn.stringify(collection)), true, '23');

            collectionTwo.addAffordance(populatedLinkT)
                .addAffordance(xhn.affordances());

            assert.strictEqual(validate.isString(xhn.stringify(collection)), true, '24');

            collection.addAffordance(linkO)
                .addAffordance(linkE)
                .addAffordance(linkT)
                .addAffordance(linkN)
                .addAffordance(linkID)
                .addAffordance(linkIU)
                .addAffordance(populatedLinkN)
                .addAffordance(populatedLinkO);

            assert.strictEqual(validate.isString(xhn.stringify(collection)), true, '25');
        }
    } catch (e) {
        console.log(e);
    }

    console.log('Everything passed.');
})();
