#!/usr/bin/env node

/**
 * Module dependencies.
 */
var coffee = require('coffee-script'),
    fs = require('fs'),
    path = require('path');

var sep = path.sep,
    argv = process.argv,
    file = argv[2],
    fileArgumentExists = !!file,
    resolved,
    fileExists,
    fileContents,
    fileContentsExist,
    fileDirName,
    compiledContents;

/**
 * Temporary HyperGraph functions.
 */
var api, graph, hypergraph, meta, metadata, headers, hyperedge, edge, request, req, protocol, input, control, vertex,
    node, response, res, mediatype, media;

api = graph = hypergraph = function (id) {
    console.log('Create graph here.');
};

meta = metadata = headers = function (data) {
    console.log('Create metadata for respective graph or edge here. Order matters.');
};

hyperedge = edge = request = req = function (id, method, resource) {
    console.log('Create edge here.');
};

protocol = function (protocol) {
    console.log('Interpret the protocol here.');
};

input = control = function () {
    console.log('Create an input control for a particular edge here. Order matters.');
};

vertex = node = response = res = function (edgeId, status, edgeIds) {
    console.log('Create a hypermedia response here.');
};

mediatype = media = function () {
    console.log('Generate all hypermedia responses using this mediatype.');
};
/**
 * ------------------------------
 */

/**
 * / on Unix.
 */
console.log('Path seperator:');
console.log(sep);
/**
 * [ 'node', '/Users/ttahmouch/Desktop/hapily/cmmh/index.js' ] at least.
 */
console.log('Arguments vector:');
console.dir(argv);
/**
 * undefined if not present. String if present.
 */
console.log('Path passed into the arguments vector:');
console.log(file);
/**
 * True if String. False if undefined. Can only be populated String or undefined. Empty String is not possible.
 */
console.log('Path passed into the arguments vector?');
console.log(fileArgumentExists);
/**
 * If String exists, then attempt file retrieval. Else, error log.
 */
if (fileArgumentExists) {
    resolved = path.resolve(file);
    fileExists = fs.existsSync(resolved) && fs.statSync(resolved).isFile();
    /**
     * String representing an absolute path to the file. May be the current working directory if an absolutely path
     * could not be created.
     */
    console.log('Absolute path passed into the arguments vector:');
    console.log(resolved);
    /**
     * True if the String was a path to a file. False, otherwise.
     */
    console.log('File exists at the path passed into the arguments vector?');
    console.log(fileExists);
    /**
     * If File exists, then attempt read. Else, error log.
     */
    if (fileExists) {
        fileContents = fs.readFileSync(resolved, 'utf8');
        fileContentsExist = !!fileContents;
        fileDirName = path.dirname(resolved);
        /**
         * String representing the contents of the file.
         */
        console.log('Contents of the file:');
        console.log(fileContents);
        /**
         * True if the String was not empty. False, otherwise.
         */
        console.log('File contained contents?');
        console.log(fileContentsExist);
        /**
         * String representing the directory of the file.
         */
        console.log('Directory containing the file:');
        console.log(fileDirName);
        /**
         * If File contents exist, then attempt to compile. Else, error log.
         */
        if (fileContentsExist) {
            compiledContents = coffee.compile(fileContents);
            /**
             * String representing the compiled JavaScript from Literate CoffeeScript.
             */
            console.log('Compiled contents of the file:');
            console.log(compiledContents);
            /**
             * String representing the absolute path to gen.
             */
            console.log('Absolute path to gen:');
            console.log(fileDirName + sep + 'gen');
            /**
             * Evaluate the compiled JavaScript.
             */
            try {
                eval(compiledContents);
            } catch (e) {
                console.log(e.message);
            }
        } else {
            console.log('Please enter an existing path to a CoffeeMakesMeHypermedia file.');
        }
    } else {
        console.log('Please enter an existing path to a CoffeeMakesMeHypermedia file.');
    }
} else {
    console.log('Please enter an existing path to a CoffeeMakesMeHypermedia file.');
}
