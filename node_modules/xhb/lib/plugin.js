/**
 * Falsy Values: false, 0, "", null, undefined, NaN
 */

/**
 * Augments the Function type object's prototype with a method called "method."
 * This method allows any Constructor Function, that prototypally inherits from
 * Function.prototype (so all Constructor Functions), to easily add methods to
 * their own prototype objects.
 *
 * @param name is the name of the method passed as a String object argument.
 * @param func is the first-class function object passed in as an argument.
 * @return {*} a reference to your respective Constructor Function.
 */
Function.prototype.method = function (name, func) {
    this.prototype[name] = func;
    return this;
};

/**
 * Plugins should be treated as delegates to decide on how to bridge a HypermediaApi (HAPI) instance to a live HTTP
 * server.
 *
 * The Hypermediator extended by this plugin will invoke Plugin.bridge() with an instance of HypermediaApi.
 * The expectation is that the method invoked will use the data residing in the HypermediaApi to create a HTTP server.
 *
 * @return {*}
 * @constructor
 */
function Plugin() {
    this._onShouldBridge = null;
    return this;
}

/**
 * Accessor method to allow the setting of the bridge delegate function.
 *
 * @param delegate should be a delegate function that accepts one argument {HypermediaApi}, and starts an HTTP server
 * that utilizes the data given with a HypermediaApi to return Hypermedia-aware responses to clients.
 * @return {*} for chaining.
 */
Plugin.method('setShouldBridgeDelegate', function (delegate) {
    this._onShouldBridge = (typeof delegate === 'function') ? delegate : this._onShouldBridge;
    return this;
});

/**
 * An introspective function that checks if a Plugin instance is capable of bridging from an instance of HypermediaApi
 * to a spawned, live HTTP server, and invokes the bridge function if it's available.
 *
 * @param api should be an instance of {HypermediaApi}
 * @return undefined
 */
Plugin.method('bridge', function (api) {
    var delegate = this._onShouldBridge;
    if (typeof delegate === 'function') {
        delegate(api);
    }
    return;
});

/**
 * Convenience method to enforce safe method invocations without the use of the new operator.
 *
 * @return {Plugin}
 */
function plugin() {
    return new Plugin();
}

/**
 * Convenience method to allow for type checking outside of the scope of this module.
 * @param object is a reference to an object you would like to test the prototypal inheritance chain on.
 * @return {Boolean}
 */
plugin.isPrototypeOf = function (object) {
    return object instanceof Plugin;
};

module.exports = exports = plugin;

