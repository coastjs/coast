/**
 * Falsy Values: false, 0, "", null, undefined, NaN
 */

/**
 * Augments the Function type object's prototype with a method called "method."
 * This method allows any Constructor Function, that prototypally inherits from
 * Function.prototype (so all Constructor Functions), to easily add methods to
 * their own prototype objects.
 *
 * @param name is the name of the method passed as a String object argument.
 * @param func is the first-class function object passed in as an argument.
 * @return {*} a reference to your respective Constructor Function.
 */
Function.prototype.method = function (name, func) {
    this.prototype[name] = func;
    return this;
};

/**
 * Module dependencies.
 */
var affordances = require('./affordances.js'),
    encoder = require('./encoder.js'),
    naval = require('./naval.js');

/**
 * Hypermediator allows for the creation of HyperGraph vertices. HyperGraph vertices are analogous to hypermedia-aware
 * responses from an API.
 *
 * In order for a Hypermediator to successfully encode a hypermedia-aware response, it must have a full working
 * knowledge of every possible action within an API. For this to occur, a Hypermediator must maintain a reference to an
 * Affordances collection representative of all action possibilities.
 *
 * In order for a Hypermediator to successfully encode a hypermedia-aware response, it must also maintain a reference to
 * an Encoder capable of encoding Affordances to a hypermedia-aware media type. By default, it contains an Encoder with
 * a NavAL JSON plugin.
 *
 * Hypermediator allows for a selection of a subset of action possibilities to be encoded into each response. Most
 * action possibilities will represent action templates by default due to the usage of URI templates. However, a
 * Hypermediator allows for injection of Affordance semantics at run-time to provide dynamic action possibilities.
 *
 * @param api is an Affordances instance representing all action possibilities available within a REST API.
 * @return {*}
 * @constructor
 */
function Hypermediator(api) {
    this._api = affordances.isPrototypeOf(api) ? api : null;
    this._encoder = encoder(naval);
    return this;
}

/**
 * Accessor method to allow the setting of the api field.
 *
 * @param api is an Affordances instance representing all action possibilities available within a REST API.
 * @return {*} for chaining.
 */
Hypermediator.method('setApi', function (api) {
    this._api = affordances.isPrototypeOf(api) ? api : this._api;
    return this;
});

/**
 * Accessor method to allow the setting of the encoder field.
 *
 * @param mediatype is an Encoder instance that will be used to encode the api Affordances to a string representation
 * of a media type the Encoder understands.
 * @return {*} for chaining.
 */
Hypermediator.method('setEncoder', function (mediatype) {
    this._encoder = encoder.isPrototypeOf(mediatype) ? mediatype : this._encoder;
    return this;
});

/**
 * Creates a hypermedia response representative of a vertex in a HyperGraph. This vertex "links" to other HyperEdges
 * within your REST API. HyperEdges are affordances. Affordances are action possibilities.
 *
 * Transitively, a vertex generated from this method just represents a subset of action possibilities invokable on your
 * API.
 *
 * @param ids is an Array of Affordance identifiers with optional link relations.
 * Examples:
 * Array of Affordance IDs: ['entry', 'get-users', 'get-user']
 * Array of Affordance IDs with Link Relations: [{'index':'entry'}, {'collection':'get-users'}, {'item':'get-user'}]
 * @return {String} representation of encoded Affordances for a vertex; otherwise, empty string.
 */
Hypermediator.method('mediate', function (ids) {
    /**
     * Get a stack frame reference to an instances fields.
     *
     * Dereferencing _api may yield null or {Affordances}.
     * Dereferencing _encoder will always yield and {Encoder}.
     */
    var api = this._api,
        mediatype = this._encoder;

    /**
     * If the _api field is not an instance of Affordances, or
     * If the _api field is an instance of Affordances, but it has no action possibilities available, or
     * If the _encoder field is not an instance of Encoder, or
     * If the ids argument is not an Array, or
     * If the ids argument is an Array, but it has no ids,
     * Then return the default empty String indicative of failure.
     */
    if (!affordances.isPrototypeOf(api) ||
        api.getCount() < 1 || !encoder.isPrototypeOf(mediatype) || !Array.isArray(ids) || ids.length < 1) {
        return '';
    }

    /**
     * Else, the fields on an instance are correct, and the arguments of this method invocation are correct.
     * Proceed with mediating the encoding of hypermedia for an API response.
     *
     * Create an instance of Affordances to represent the hypermedia to be encoded for the respective response.
     */
    var hypermedia = affordances();
    /**
     * At this point, we are guaranteed that the argument is an Array of at least length one.
     * Therefore, it's enumerable.
     */
    for (var id in ids) {
        /**
         * Dereference each index of the Array to what is supposedly a String representative of an Affordance or
         * Affordances identifier.
         */
        id = ids[id];
        /**
         * Attempt to query the API Affordances collection for a copy of an Affordance or Affordances instance
         * associated with the respective identifier.
         */
        var affordance = api.copyAffordanceById(id);
        /**
         * If it could not find something associated with the identifier within the collection,
         * Then it returned null.
         * Return the default empty String indicative of failure.
         * We were not able to mediate an action possibility for the hypermedia response.
         */
        if (!affordance) {
            console.log('Could not resolve ID to an instance of Affordance(s): ' + id);
            return '';
        }
        /**
         * Else, it found an instance of Affordance(s) within the API collection, and returned a shallow-copy of the
         * instance.
         * Add the copy to the stack-framed reference of Affordances with the intention of encoding the hypermedia
         * response.
         */
        hypermedia.addAffordance(affordance);
    }
    /**
     * This may return the default empty String indicative of failure.
     * It returns an empty String if the Encoder within this instance does not have a Plugin capable of encoding.
     * Otherwise, it will return an encoded String representation of the Affordances collection.
     */
    return mediatype.encode(hypermedia);
});

/**
 * Convenience method to enforce safe method invocations without the use of the new operator.
 *
 * @param api is an Affordances instance representing all action possibilities available within a REST API.
 * @return {Hypermediator}
 */
function hypermediator(api) {
    return new Hypermediator(api);
}

/**
 * Convenience method to allow for type checking outside of the scope of this module.
 *
 * @param object is a reference to an object you would like to test the prototypal inheritance chain on.
 * @return {Boolean}
 */
hypermediator.isPrototypeOf = function (object) {
    return object instanceof Hypermediator;
};

module.exports = exports = hypermediator;
